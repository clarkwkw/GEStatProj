{
    "headline": "If Microsoft's VS11 Express changes are a problem, you're doing it wrong", 
    "text": "Thursday night saw quite a brouhaha on Twitter about the rejigging of Microsoft&apos;s Visual Studio 11 (VS11) versions and the simultaneous removal of the compiler toolchain from the Windows Software Development Kit (SDK). People were not happy. Count me in: I too was not happy.  (You can read some of the discussions here, here, and here.) Microsoft is changing at lot at the moment as we close in on Windows 8 and Windows RT (the locked-down Metro version for ARM-based tablets). But are we just reacting against the change because we don&apos;t like change? Let&apos;s have a look and find out  Removing the compiler Seriously, who cares? So the story here is that the Windows SDK has always had a compiler. The Windows SDK itself is so old that I&apos;m pretty sure it was the first thing ever to be called an &quot;SDK&quot;.  I&apos;ve been writing software for Windows for 21 years. The number of times I&apos;ve invoked the compiler directly, as opposed to through an IDE, is somewhere in the region of zero. Before that, when I used to write software for DOS on Zorland/Zortech and Borland, I&apos;m pretty sure I never invoked the compiler directly. But perhaps that&apos;s not the point. The point is now that in order to get that stuff, you have to pay for it, whereas since the dawn of time it had been free. The internet doesn&apos;t like it when stuff goes from &quot;free&quot; to &quot;paid&quot;. Express Microsoft typically uses the &quot;Express&quot; moniker to denote free versions of product SKUs [stock-keeping unit  ie, something that is a separate product from other products  so Windows XP Home and Windows XP Professional are two SKUs]. They are generally pretty hardcore products, just with some of their capabilities lightly trimmed. For instance, the SQL Server Express SKUs have significant limits on processor and memory consumption.  What was typically missing from the Visual Studio Express editions was anything to do with application lifecycle management (ALM)  ie, issue tracking, continuous integration, modelling, and so on. Express wasn&apos;t and isn&apos;t about &quot;proper&quot; software engineering. Microsoft&apos;s position is that it&apos;s about &quot;programming&quot;, as opposed to being software that you can use within a real commercial endeavour. If you actually ever made any real money out of writing software for the Microsoft stack (and people who do do that are always targeting big corporates), you need some proper ALM tools to go along with it. Proper software houses don&apos;t use Express, and they never have. Express carries the aroma of &quot;hobbyist&quot;. Microsoft&apos;s position on development tools has always been pretty free and easy. Since the beginning Microsoft&apos;s objective has been about getting developer tools out there and making them as cheap as possible to reduce the cost of entry for developers. If you go way back, Express was supposed to be a paid product  albeit at the $100 range. The Microsoft team changed their mind and made it free instead.  What&apos;s changed now is that Express has got a lot less &quot;hippy&quot; and a lot more corporate. Corporate The kinds of software you can write for Windows is pretty extensive. You can write web applications, desktop applications (Windows Forms, WPF/Silverlight, MFC, or straight Win32), service applications (.NET or Win32), and device drivers (Win32). You can run your software on desktops, &quot;normal&quot; servers, or PaaS providers like Microsoft Azure or AppHarbor. And now with Windows 8/Windows RT we&apos;re getting Metro-style apps, written in WinRT, the bastard lovechild of .NET and a COM. That&apos;s a lot of different ways to write and package software. Prior to VS11 you could use the Express editions to do any of this. But it appears now that Microsoft&apos;s hippy/free-loving Developer tools division (DevDiv) have had their party curtailed by the Windows division (WinDiv). The WinDiv team wants certain technologies pushed more than others  specifically, they&apos;re really keen on building software that runs on Azure, ASP.NET-based web apps, and apps for Windows Phone, and they are absolutely mad keen for developers to write Metro-style apps to fit into their new strategy for Windows 8/Windows RT. Thus, VS11 will be available in two versions: a &quot;for Windows 8&quot; version that according to the Microsoft web site lets you build &quot;Metro-style applications&quot;. This is the new process model for Windows 8/Windows RT. Sandboxed apps, tightly controlled, WinRT based, and distributed through the Microsoft Store. (Presumably this will also also include the Windows Phone tooling  although my guess would be for WP8/Apollo not WP7.)  The second version, &quot;for Web&quot;, targets ASP.NET and Azure. At this point, if you want to write device drivers using Express, you&apos;re screwed. But it&apos;s hardly likely anyone would do that. Likewise, using Express to build MFC or Win32 applications? Uh  hardly. I guess there are probably a few hobbyists out there with some old-school apps that they maintain as a semi-commercial enterprise. They&apos;re going to have to keep using pre-VS11 Express versions which, by the way, will still be supported, even up to .NET 4.0. This leaves Silverlight and Windows Forms developers as the group that are really missing out in VS11 land. Honestly? Those guys need to get with the program. Silverlight is dead. Let&apos;s just repeat: dead. I&apos;m not shedding a tear for this tooling not being available in VS11. Likewise Windows Forms: it&apos;s handy to have around, but as for the hobbyist with a MFC app that still needs maintaining, the answer is to just use an old version. Free toolsets It seems like Microsoft is changing everything every day with Windows 8. That&apos;s either the sign of a company that&apos;s completely on top of a complex secret strategy, or one on a direct path to self-destruction. We&apos;re not going to know until the market judges Windows 8 and Windows RT.  I don&apos;t like some of the things they&apos;re doing, Nor do some Windows cheerleaders; when was the last time you saw Paul Thurrott being so down on a desktop feature? I&apos;m hardly delighted about the Chimera-esque nature of classic desktop and Metro-style. And to be clear, I don&apos;t like the decision to neuter VS11&apos;s capabilities to line up with Microsoft&apos;s corporate strategy. I just don&apos;t think it matters. With the VS11 Express editions you can build Metro-style apps, or web apps. Web apps are really important in the big picture. A developer who knows how to put together a state-of-the-art web application has his or her professional skillset in good shape. A developer who can build a Windows Forms app but is baffled by &quot;$(&apos;div&apos;).addClass(&apos;foobar&apos;)&quot; needs to take some time out of playing Diablo III and spend more time on CodeSchool.  Metro-style is a big deal for Microsoft. If we can peer through the fog of change to what it&apos;s about, it&apos;s all about positioning a product that can compete with the iPad. Microsoft providing free tooling for this fits with the commonly accepted notion that platform adoption is helped by free tooling. Apple&apos;s tooling for iOS is free (once, ahem, you&apos;ve bought a Mac). So is Android&apos;s. For what it&apos;s worth, so is RIM&apos;s. Likewise Windows Phone, for which that tooling will still be free.  What this comes down to is that in the three places where Microsoft wants to drive adoption (web, Windows Phone, and Metro-style) the tooling is still free. This works for them, their shareholders, and the developers. In the places where Microsoft doesn&apos;t want to drive adoption, the tooling is paid-for. What we&apos;re looking at here is a change in attitude. Express is no longer a free ride to all stops on Microsoft&apos;s futuristic monorail. You can now only ride for free to where they want you to go. ALM should always be a charged thing. If you&apos;re selling your software to customers, then if ALM provides a way for you to drive operational efficiencies and quality, then damn right you should pay for that. Likewise, if you&apos;ve got a 15-year-old legacy client/system system that only runs on NT 3.51, server and workstation, damn right you should pay for that tooling too, because someone will be paying you big money to keep that whole mess up and running. Why on earth should that be free?  Look at GitHub  yes, it&apos;s free if you&apos;re doing open source. But putting private repositories up there is downright expensive, even compared to things like Perforce. As software engineers, we should all understand that if you&apos;re not paying for it, you become the product. What about removing the removal of the C++ compiler from the SDK? I think for this one we need Hanlon&apos;s famous razor: don&apos;t attribute to malice what can be attributed to stupidity. Microsoft is being extremely enigmatic in its communications at the moment. We don&apos;t really know why the compiler toolchain has been removed. The sinister explanation is that DevDiv or WinDiv want to stop people circumventing the VS11 restrictions. The more straightforward explanation is that as virtually everyone uses Visual Studio to build Windows software, distributing the toolchain once in that package is more straightforward. Conclusion As with all things, follow the money. Yes, it&apos;s nice to have a toolset that&apos;s free, but if you&apos;re making proper money out of something, you&apos;ll happily buy the tools. If you&apos;re not making proper money, use the older, free tools. It&apos;s easy enough to go &quot;ooh, software development is fun! Let&apos;s do it for free!&quot;, but it&apos;s not like that. If I couldn&apos;t make money out of software development I&apos;d do much, much less of it. I suspect we all would. Nothing to see here. Move on.  Matthew Baxter-Reynolds is an independent software development consultant, trainer and author based in the UK. His favourite way to communicate with like-minded technical people is Twitter: @mbrit", 
    "section": "technology", 
    "gid": "technology/blog/2012/may/25/vs11-windows8-microsoft-fuss-nothing", 
    "wordcount": "1655"
}