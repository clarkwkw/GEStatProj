{
    "headline": "We shouldn't waste time teaching students basic IT skills", 
    "text": "In recent days, several sources, primarily in the US, have suggested that all undergraduates should be taught computer programming. Right-thinking institutions will see the sense in this suggestion, but it may be hard to implement at the departmental level within the UK system that does not operate on a major/minor system. By way of credentials and introduction, I am a Microsoft Certified Professional in C# and the .NET Framework and have worked as a computer programmer in several positions. More generally, I write code that pertains to my day-to-day activities, such as plugins for Open Journal Systems, the open access publication platform. However, my PhD and area of teaching and expertise is American postmodernist fiction. This, perhaps strange, skillset has served me well and the same would go for undergraduates going through the system now. In the humanities we are, sometimes rightly, proud of our ability to think critically about the institutions of power that surround us and narrow our possibilities of agency. Without knowing at least the rudiments of how that world is driven, a world powered by computer science and software, what purchase do we have? How many teachers of Gulliver&apos;s Travels explain Endianness to their students? They should, not only to make it relevant, but because it is genuinely interesting. In all disciplines, though, from physics through to philosophy, we are teaching students useless, proprietary IT skills. Indeed, I am sceptical whether we can call using Microsoft Word and Powerpoint a &quot;skill&quot;. It&apos;s more a prerequisite to existence in contemporary society and belittles the &quot;higher&quot; of higher education; few would call basic arithmetic a skill at this level. Understanding computer programming gives insight into how programs are designed and teaches a student to fish  that is, to understand how a structure might apply in any program they use  rather than being given the Microsoft carp. They will be able to discover the joys of open source, free software and, if something doesn&apos;t work as expected, might even be able to fix it for themselves and others. Whether critical or constructive, coding has value. At the faculty level, a fundamental misunderstanding of web technologies and, in many areas, a Luddite clinging to the extant system could perhaps be construed as a factor delaying the implementation of open access. Without a knowledge of protocols, such as Lockss, the trust in digital preservation must necessarily be downgraded. Furthermore, even those members of staff who, once informed, do favour open access, often lack the technical knowledge to establish their own journals and break the commercial spell. When students leave university, they will most likely, at some point in their lives, have to write something for the web. What use will their IT skills be then? They will be stranded on the shore of frustration on a desert island of obsolete ability. While I don&apos;t think that university is about giving students employment skills, if there are skills we can teach that provide students with a critical understanding that is relevant to every discipline, while simultaneously preparing them for the world outside, then why should we shy away from such a programme? To put it bluntly: the first institution that implements this will be university++ while those that don&apos;t will be assigned as null. Martin Paul Eve is a doctoral researcher at the University of Sussex. He tweets at @martin_eve This content is brought to you by Guardian Professional. To get more articles like this direct to your inbox, sign up for free to become a member of the Higher Education Network.", 
    "section": "higher-education-network", 
    "gid": "higher-education-network/blog/2012/jan/12/teaching-students-basic-it-skills", 
    "wordcount": "595"
}